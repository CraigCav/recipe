{"data":{"markdownRemark":{"html":"<p>Tables are used to display information from a data set in a way that's easy to scan. Tables allow users to compare and analyze the data to look for patterns and insights. Tables will often be the primary content within a <a href=\"/recipe/components/ez-card\">Card</a>.</p>\n<hr>\n<p><EzAlert\n  headline=\"This component is under development\"\n  tagline=\"There will likely be breaking changes to the API. Proceeed with caution.\"\n  use=\"warning\"\n/></p>\n<br/>\n<br/>\n<p>Features still in consideration include:</p>\n<ul>\n<li>Responsive variants (cards with repeated labels, transpose table)</li>\n<li>Column pinning to support horizontal scrolling</li>\n<li>Header-less table</li>\n<li>Filtering</li>\n<li>Row hover styles (interactive)</li>\n<li>Zebra Striping</li>\n<li>Pagination</li>\n<li>Table Actions (print, download etc)</li>\n<li>Column width options (fixed, grow, auto, ellipsis, tooltip)</li>\n<li>Header-less columns (content between columns, e.g. formula operators)</li>\n<li>Sticky headers</li>\n</ul>\n<hr>\n<h2 id=\"best-practices\"><a href=\"#best-practices\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Best Practices</h2>\n<p>Tables should:</p>\n<ul>\n<li>Be used to show homogeneous content.</li>\n<li>Help users visualize values from a data set.</li>\n<li>Only display values supporting the data's purpose.</li>\n<li>Include a heading to help identify the contents of the table at-a-glance.</li>\n</ul>\n<h2 id=\"alignment\"><a href=\"#alignment\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Alignment</h2>\n<p>Column content types can be varied using component props to enable the following alignment rules:</p>\n<ul>\n<li>Numerical values should be right aligned</li>\n<li>Textual values should be left aligned</li>\n<li>Headers (where present) should align with their data</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\"><a href=\"#content-guidelines\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Content guidelines</h2>\n<p>Tables should:</p>\n<ul>\n<li>Include concise but descriptive headers</li>\n<li>Avoid truncating content where possible</li>\n</ul>\n<p>Tables can also:</p>\n<ul>\n<li>Support items that perform an action when clicked. For example, navigating to the item's details page or provide more detail about the item.</li>\n<li>Provide bulk actions for tasks that are applicable to many items at once.</li>\n</ul>\n<h2 id=\"examples\"><a href=\"#examples\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h2>\n<h3 id=\"simple-table\"><a href=\"#simple-table\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simple table</h3>\n<p>Used whenever the tabular data is directly related to the preceding or subsequent content. Simple tables should be used as a direct child of a <a href=\"/recipe/components/ez-card\">Card</a> component.</p>\n<pre><code class=\"language-jsxwide\">&#x3C;EzPage>\n  &#x3C;EzCard>\n    &#x3C;EzHeading\n      size=\"3\"\n    >\n      Card Title\n    &#x3C;/EzHeading>\n    &#x3C;EzAlert\n      headline=\"Info message\"\n      tagline=\"An example of content that is a sibling of the table.\"\n      use=\"info\"\n    />\n    &#x3C;EzTable\n      columns={[\n        {heading: 'From', accessor: 'from'},\n        {heading: 'Through', accessor: 'to'},\n        {heading: 'Total time closed', accessor: 'total'}\n      ]}\n      items={[\n        {from: '9/3/18', to: '9/5/18', total: '3 days'},\n        {from: '10/8/18', to: '10/8/18', total: '1 days'}\n      ]} />\n    &#x3C;p>Tables may share a card with other related content.&#x3C;/p>\n  &#x3C;/EzCard>\n&#x3C;/EzPage>\n</code></pre>\n<h3 id=\"tables-that-fill-a-card\"><a href=\"#tables-that-fill-a-card\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tables that fill a Card</h3>\n<p>Used whenever the tabular data alone represents a cohesive set of content. Should be used with a <code>title</code> prop and may include optional actions.</p>\n<pre><code class=\"language-jsxwide\">&#x3C;EzPage>\n  &#x3C;EzTable\n    title=\"All Stores\"\n    subtitle=\"Compared to the same period last year\"\n    columns={[\n      {heading: 'Store name', accessor: 'store'},\n      {heading: 'Total sales', accessor: 'total', numeric: true},\n      {heading: 'Average order value', accessor: 'average', numeric: true}\n    ]}\n    items={[\n      {id: '#004', store: '123 Example Store', total: 23267, average: 327.79},\n      {id: '#007', store: '45 Meadowview Lane', total: 22788, average: 367.55},\n    ]} />\n&#x3C;/EzPage>\n</code></pre>\n<h3 id=\"table-with-actions\"><a href=\"#table-with-actions\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table with actions</h3>\n<p>Tables that fill a card can also offer actions that operate on the table data, or are related to the table content.</p>\n<p>Consider wrapping actions in an <a href=\"/recipe/components/ez-layout\">EzLayout</a> to manage how actions stack at smaller breakpoints.</p>\n<pre><code class=\"language-jsxwide\">&#x3C;EzPage>\n  &#x3C;EzTable\n    title=\"All Orders\"\n    actions={&#x3C;EzButton>View related orders&#x3C;/EzButton>}\n    columns={[\n      {heading: 'Order number', accessor: 'id'},\n      {heading: 'Event date', accessor: 'date'},\n      {heading: 'Total', accessor: 'total', numeric: true},\n    ]}\n    items={[\n      {id: '#004', date: '02/28/18', total: '$3267'},\n      {id: '#007', date: '02/28/18', total: '$3214'},\n    ]}\n  />\n&#x3C;/EzPage>\n</code></pre>\n<h3 id=\"custom-cell-rendering\"><a href=\"#custom-cell-rendering\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom cell rendering</h3>\n<p>Use when more fine-grained control over the table content is desired (in favor of simple Textual/Numerical content). To provide custom content, the <code>accessor</code> property of each column can be provided any <a href=\"https://reactjs.org/docs/rendering-elements.html\">React element</a> or custom React component. Custom components will be provided an <code>item</code> prop with the record to be rendered.</p>\n<pre><code class=\"language-jsxwide\">() => {\n  // declare any component to define your custom column template\n  const StoreName = ({item: {store, id}}) => (\n    &#x3C;div>\n      &#x3C;div>\n        &#x3C;a href=\"javascript:void(0);\">{store}&#x3C;/a>\n      &#x3C;/div>\n      &#x3C;div>\n        &#x3C;EzTextStyle use=\"subdued\">{id}&#x3C;/EzTextStyle>\n      &#x3C;/div>\n    &#x3C;/div>\n  );\n\n  return (\n    &#x3C;EzPage>\n      &#x3C;EzTable\n        title=\"All Stores\"\n        subtitle=\"Compared to the same period last year\"\n        columns={[\n          {heading: 'Store name', accessor: StoreName},\n          {heading: 'Total sales', accessor: 'total', numeric: true},\n          {heading: 'Average order value', accessor: 'average', numeric: true}\n        ]}\n        items={[\n          {id: '#004', store: '123 Example Store', total: 23267, average: 327.79},\n          {id: '#007', store: '45 Meadowview Lane', total: 22788, average: 367.55},\n        ]} />\n    &#x3C;/EzPage>\n  );\n}\n</code></pre>\n<h3 id=\"bulk-row-selection\"><a href=\"#bulk-row-selection\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bulk row selection</h3>\n<p>Use when multiple rows of a table can be selected together in order to perform an action in bulk.</p>\n<p>Providing the bulk select event handler props (<code>onRowSelectClick</code>, <code>onBulkSelectClick</code>, <code>isRowSelected</code>) will add a column to each table row containing a checkbox input, along with a corresponding column header containing a checkbox input.</p>\n<p>The row-level checkbox input can be toggled to indicate that the current row should be included in a particular action. This functionality is handled by the <code>isRowSelected</code> and <code>onRowSelectClick</code> props. <code>isRowSelected</code> is a Function that is used to determine the row-level checkbox input state. It is called when rendering each row, and is passed the row's <code>item</code> object as the single argument. <code>onRowSelectClick</code> is a Function that is bound to the row-level checkbox input change handler. It is called when the input state changes, and is passed the row's <code>item</code> object as the single argument.</p>\n<p>The column header checkbox input can be toggled to select or deselect all currently visible rows. This functionality is handled by the <code>onBulkSelectClick</code> prop. This should be a Function that handles the behavior of selecting or deselecting all the visible table rows.</p>\n<p>The column header checkbox input state and behavior is determined by evaluating the state of each visible table row. If all rows are selected, then the checkbox will appear selected, and deselecting the input should deselect all rows. If some or none of the rows are selected, the checkbox will appear deselected, and selecting the input should select all rows.</p>\n<pre><code class=\"language-jsxwide\">() => {\n  const items = [\n    {store: '123 Example Store', total: 23267, average: 327.79},\n    {store: '45 Meadowview Lane', total: 22788, average: 367.55},\n  ];\n\n  const Table = () => {\n    const [selection, setSelection] = React.useState([]);\n\n    const selectRow = item => setSelection(selection.concat(item));\n    const deselectRow = item => setSelection(selection.filter(x => x !== item));\n    const isRowSelected = item => selection.includes(item);\n\n    const onBulkSelectClick = () => {\n      const newSelection = selection.length === items.length ? [] : items;\n      setSelection(newSelection);\n    };\n\n    const onRowSelectClick = (_event, {item}) => {\n      isRowSelected(item) ? deselectRow(item) : selectRow(item);\n    };\n\n    return (\n      &#x3C;EzPage>\n        &#x3C;EzTable\n          title=\"All Stores\"\n          subtitle=\"Compared to the same period last year\"\n          onRowSelectClick={onRowSelectClick}\n          onBulkSelectClick={onBulkSelectClick}\n          isRowSelected={isRowSelected}\n          columns={[\n            {heading: 'Store name', accessor: 'store'},\n            {heading: 'Total sales', accessor: 'total', numeric: true},\n            {heading: 'Average order value', accessor: 'average', numeric: true}\n          ]}\n          items={items} />\n      &#x3C;/EzPage>\n    );\n  }\n\n  return &#x3C;Table />;\n}\n</code></pre>\n<h3 id=\"with-sortable-columns\"><a href=\"#with-sortable-columns\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>With sortable columns</h3>\n<p>Use column sorting to help users find items quicker in larger data sets. Column sorting is switched off for all columns by default. Table data can only be sorted by a single column at a time.</p>\n<p>To turn on column sorting, set the <code>sortable</code> flag for each column where sorting is supported. Sorting columns with custom cell rendering is currently not supported.</p>\n<p>The client code must also provide an <code>onSortClick</code> function as a prop to <code>EzTable</code>. When the column header for a sortable column is clicked, <code>EzTable</code> will notify the client that sorting is requested by calling the provided <code>onSortClick</code> function. The function is called with the click event as the first argument, and an object with the properties <code>column</code> and <code>direction</code> as the second argument. <code>column</code> is the object representing the column being sorted and <code>direction</code> is a string whose value represents the direction the sort should use, either <code>asc</code> or <code>desc</code>. When sorting an unsorted column, the initial sort direction is <code>asc</code>.</p>\n<p>When providing pre-sorted data to EzTable, the relevant column should have a <code>defaultSort</code> value set to either <code>asc</code> or <code>desc</code> to indicate the sort order applied to the data.</p>\n<pre><code class=\"language-jsxwide\">() => {\n  const initialItems = [\n    {name: 'Joan Jett', storeCount: 12},\n    {name: 'David Bowie', storeCount: 6},\n    {name: 'Sheena Easton', storeCount: 6},\n    {name: 'Stevie Nicks', storeCount: 1},\n  ];\n\n  const Table = () => {\n    const [items, updateItems] = React.useState(initialItems);\n\n    const onSortClick = (_event, {column, direction}) => {\n      const newItems = [...initialItems].sort((a, b) => {\n        const val1 = a[column.accessor];\n        const val2 = b[column.accessor];\n\n        return (direction === 'asc' ? val1 > val2 : val1 &#x3C; val2) ? 1 : -1;\n      });\n\n      updateItems(newItems);\n    };\n\n    return (\n      &#x3C;EzPage>\n        &#x3C;EzTable\n          title=\"Store Owners\"\n          onSortClick={onSortClick}\n          columns={[\n            {heading: 'Name', accessor: 'name', sortable: true},\n            {heading: 'Store Count', accessor: 'storeCount', sortable: true, defaultSort: 'desc'},\n          ]}\n          items={items}\n        />\n      &#x3C;/EzPage>\n    );\n  };\n\n  return &#x3C;Table />;\n};\n</code></pre>\n<h3 id=\"pagination\"><a href=\"#pagination\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pagination</h3>\n<p>Pagination can be used to display a large data set, either local or remote, with a set number of rows per page.</p>\n<p>Pagination is enabled by adding the <code>pagination</code> attribute to <code>EzTable</code> with the following properties:</p>\n<ul>\n<li><code>currentPage</code> (required): an integer that represents the default starting page for the data set. This number is 1-indexed.</li>\n<li><code>totalRows</code> (required): an integer that represents the total number of items in the data set.</li>\n<li><code>rowsPerPage</code> (required): an integer used to determine how many items to show per page in the table.</li>\n<li><code>rowsPerPageOptions</code> (required): an array of integers that is displayed at the bottom right of the table used to change <code>rowsPerPage</code>.</li>\n<li><code>onPrevPageClick</code> (required): an event that is fired when the \"Previous Page\" link is clicked.</li>\n<li><code>onNextPageClick</code> (required): an event that is fired when the \"Next Page\" link is clicked.</li>\n<li><code>onRowsPerPageChange</code> (required): an event that is fired when the \"n rows per page\" select value is changed.</li>\n</ul>\n<h4 id=\"local-data\"><a href=\"#local-data\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Local Data</h4>\n<p>This example uses a local data set. The reducer is used to change the <code>currentPage</code> and <code>rowsPerPage</code>.</p>\n<pre><code class=\"language-jsxwide\">() => {\n  const allItems = [\n    {first: 'Tiffany', last: 'Morin'},\n    {first: 'Mitchell', last: 'Hoffman'},\n    {first: 'Léo', last: 'Gonzalez'},\n    {first: 'Alberto', last: 'Arias'},\n    {first: 'Olivier', last: 'Campos'},\n    {first: 'Ömür', last: 'Ekici'},\n    {first: 'Énio', last: 'Barros'},\n    {first: 'Ava', last: 'Ma'},\n    {first: 'Norberta', last: 'Novaes'},\n    {first: 'Deni', last: 'Lubbers'},\n  ];\n\n  function reducer(state, action) {\n    switch (action.type) {\n      case 'incrementCurrentPage':\n        return {\n          ...state,\n          currentPage: state.currentPage + 1,\n        };\n      case 'decrementCurrentPage':\n        return {...state, currentPage: state.currentPage - 1};\n      case 'updateRowsPerPage':\n        return {\n          ...state,\n          rowsPerPage: action.value,\n          currentPage: 1,\n        };\n      default:\n        throw new Error();\n    }\n  }\n\n  const Table = () => {\n    const [state, dispatch] = React.useReducer(reducer, {\n      currentPage: 1,\n      totalRows: 10,\n      rowsPerPage: 5,\n    });\n\n    const startIndex = (state.currentPage - 1) * state.rowsPerPage;\n\n    return (\n      &#x3C;EzPage>\n        &#x3C;EzTable\n          title=\"Store Owners\"\n          columns={[\n            {heading: 'First Name', accessor: 'first'},\n            {heading: 'Last Name', accessor: 'last'},\n          ]}\n          items={allItems.slice(startIndex, startIndex + state.rowsPerPage)}\n          pagination={{\n            currentPage: state.currentPage,\n            totalRows: state.totalRows,\n            rowsPerPage: state.rowsPerPage,\n            rowsPerPageOptions: [5, 10, 20, 30],\n            onPrevPageClick: e => {\n              e.preventDefault();\n              dispatch({type: 'decrementCurrentPage'});\n            },\n            onNextPageClick: e => {\n              e.preventDefault();\n              dispatch({type: 'incrementCurrentPage'});\n            },\n            onRowsPerPageChange: e => {\n              e.preventDefault();\n              dispatch({type: 'updateRowsPerPage', value: e.target.value});\n            },\n          }}\n        />\n      &#x3C;/EzPage>\n    );\n  };\n\n  return &#x3C;Table />;\n};\n</code></pre>\n<h4 id=\"local-data-with-sorting\"><a href=\"#local-data-with-sorting\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Local Data with Sorting</h4>\n<p>This example uses a local data set and enables sorting on that data set. The reducer is used to change the <code>currentPage</code>, <code>rowsPerPage</code>, and sorts the <code>items</code> based on the column and sort direction supplied by the column headers.</p>\n<pre><code class=\"language-jsxwide\">() => {\n  const initialItems = [\n    {first: 'Tiffany', last: 'Morin'},\n    {first: 'Mitchell', last: 'Hoffman'},\n    {first: 'Léo', last: 'Gonzalez'},\n    {first: 'Alberto', last: 'Arias'},\n    {first: 'Olivier', last: 'Campos'},\n    {first: 'Ömür', last: 'Ekici'},\n    {first: 'Énio', last: 'Barros'},\n    {first: 'Ava', last: 'Ma'},\n    {first: 'Norberta', last: 'Novaes'},\n    {first: 'Deni', last: 'Lubbers'},\n  ];\n\n  function reducer(state, action) {\n    switch (action.type) {\n      case 'incrementCurrentPage':\n        return {\n          ...state,\n          currentPage: state.currentPage + 1,\n        };\n      case 'decrementCurrentPage':\n        return {...state, currentPage: state.currentPage - 1};\n      case 'updateRowsPerPage':\n        return {\n          ...state,\n          rowsPerPage: action.value,\n          currentPage: 1,\n        };\n      case 'updateSort':\n        return {\n          ...state,\n          currentPage: 1,\n          items: [...initialItems].sort((a, b) => {\n            const val1 = a[action.value.column.accessor];\n            const val2 = b[action.value.column.accessor];\n\n            return (action.value.direction === 'asc' ? val1 > val2 : val1 &#x3C; val2) ? 1 : -1;\n          }),\n        };\n      default:\n        throw new Error();\n    }\n  }\n\n  const Table = () => {\n    const [state, dispatch] = React.useReducer(reducer, {\n      currentPage: 1,\n      totalRows: 10,\n      rowsPerPage: 5,\n      items: initialItems,\n    });\n\n    const startIndex = (state.currentPage - 1) * state.rowsPerPage;\n\n    return (\n      &#x3C;EzPage>\n        &#x3C;EzTable\n          title=\"Store Owners\"\n          onSortClick={(_event, value) => {\n            dispatch({type: 'updateSort', value});\n          }}\n          columns={[\n            {heading: 'First Name', accessor: 'first', sortable: true},\n            {heading: 'Last Name', accessor: 'last', sortable: true},\n          ]}\n          items={state.items.slice(startIndex, startIndex + state.rowsPerPage)}\n          pagination={{\n            currentPage: state.currentPage,\n            totalRows: state.totalRows,\n            rowsPerPage: state.rowsPerPage,\n            rowsPerPageOptions: [5, 10, 20, 30],\n            onPrevPageClick: e => {\n              e.preventDefault();\n              dispatch({type: 'decrementCurrentPage'});\n            },\n            onNextPageClick: e => {\n              e.preventDefault();\n              dispatch({type: 'incrementCurrentPage'});\n            },\n            onRowsPerPageChange: e => {\n              e.preventDefault();\n              dispatch({type: 'updateRowsPerPage', value: e.target.value});\n            },\n          }}\n        />\n      &#x3C;/EzPage>\n    );\n  };\n\n  return &#x3C;Table />;\n};\n</code></pre>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Tables are used to display information from a data set in a way that's easy to scan. Tables allow users to compare and analyze the data to look for patterns and insights. Tables will often be the primary content within a "},{"type":"element","tagName":"a","properties":{"href":"/recipe/components/ez-card"},"children":[{"type":"text","value":"Card"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"ezalert","properties":{"headline":"This component is under development","tagline":"There will likely be breaking changes to the API. Proceeed with caution.","use":"warning"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Features still in consideration include:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Responsive variants (cards with repeated labels, transpose table)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Column pinning to support horizontal scrolling"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Header-less table"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Filtering"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Row hover styles (interactive)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Zebra Striping"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Pagination"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Table Actions (print, download etc)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Column width options (fixed, grow, auto, ellipsis, tooltip)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Header-less columns (content between columns, e.g. formula operators)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Sticky headers"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"best-practices"},"children":[{"type":"element","tagName":"a","properties":{"href":"#best-practices","ariaHidden":true,"className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","height":16,"version":"1.1","viewBox":"0 0 16 16","width":16},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Best Practices"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Tables should:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Be used to show homogeneous content."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Help users visualize values from a data set."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Only display values supporting the data's purpose."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Include a heading to help identify the contents of the table at-a-glance."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"alignment"},"children":[{"type":"element","tagName":"a","properties":{"href":"#alignment","ariaHidden":true,"className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","height":16,"version":"1.1","viewBox":"0 0 16 16","width":16},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Alignment"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Column content types can be varied using component props to enable the following alignment rules:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Numerical values should be right aligned"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Textual values should be left aligned"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Headers (where present) should align with their data"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"content-guidelines"},"children":[{"type":"element","tagName":"a","properties":{"href":"#content-guidelines","ariaHidden":true,"className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","height":16,"version":"1.1","viewBox":"0 0 16 16","width":16},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Content guidelines"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Tables should:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Include concise but descriptive headers"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Avoid truncating content where possible"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Tables can also:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Support items that perform an action when clicked. For example, navigating to the item's details page or provide more detail about the item."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Provide bulk actions for tasks that are applicable to many items at once."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"examples"},"children":[{"type":"element","tagName":"a","properties":{"href":"#examples","ariaHidden":true,"className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","height":16,"version":"1.1","viewBox":"0 0 16 16","width":16},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Examples"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"simple-table"},"children":[{"type":"element","tagName":"a","properties":{"href":"#simple-table","ariaHidden":true,"className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","height":16,"version":"1.1","viewBox":"0 0 16 16","width":16},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Simple table"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Used whenever the tabular data is directly related to the preceding or subsequent content. Simple tables should be used as a direct child of a "},{"type":"element","tagName":"a","properties":{"href":"/recipe/components/ez-card"},"children":[{"type":"text","value":"Card"}]},{"type":"text","value":" component."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-jsxwide"]},"children":[{"type":"text","value":"<EzPage>\n  <EzCard>\n    <EzHeading\n      size=\"3\"\n    >\n      Card Title\n    </EzHeading>\n    <EzAlert\n      headline=\"Info message\"\n      tagline=\"An example of content that is a sibling of the table.\"\n      use=\"info\"\n    />\n    <EzTable\n      columns={[\n        {heading: 'From', accessor: 'from'},\n        {heading: 'Through', accessor: 'to'},\n        {heading: 'Total time closed', accessor: 'total'}\n      ]}\n      items={[\n        {from: '9/3/18', to: '9/5/18', total: '3 days'},\n        {from: '10/8/18', to: '10/8/18', total: '1 days'}\n      ]} />\n    <p>Tables may share a card with other related content.</p>\n  </EzCard>\n</EzPage>\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"tables-that-fill-a-card"},"children":[{"type":"element","tagName":"a","properties":{"href":"#tables-that-fill-a-card","ariaHidden":true,"className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","height":16,"version":"1.1","viewBox":"0 0 16 16","width":16},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Tables that fill a Card"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Used whenever the tabular data alone represents a cohesive set of content. Should be used with a "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"title"}]},{"type":"text","value":" prop and may include optional actions."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-jsxwide"]},"children":[{"type":"text","value":"<EzPage>\n  <EzTable\n    title=\"All Stores\"\n    subtitle=\"Compared to the same period last year\"\n    columns={[\n      {heading: 'Store name', accessor: 'store'},\n      {heading: 'Total sales', accessor: 'total', numeric: true},\n      {heading: 'Average order value', accessor: 'average', numeric: true}\n    ]}\n    items={[\n      {id: '#004', store: '123 Example Store', total: 23267, average: 327.79},\n      {id: '#007', store: '45 Meadowview Lane', total: 22788, average: 367.55},\n    ]} />\n</EzPage>\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"table-with-actions"},"children":[{"type":"element","tagName":"a","properties":{"href":"#table-with-actions","ariaHidden":true,"className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","height":16,"version":"1.1","viewBox":"0 0 16 16","width":16},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Table with actions"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Tables that fill a card can also offer actions that operate on the table data, or are related to the table content."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Consider wrapping actions in an "},{"type":"element","tagName":"a","properties":{"href":"/recipe/components/ez-layout"},"children":[{"type":"text","value":"EzLayout"}]},{"type":"text","value":" to manage how actions stack at smaller breakpoints."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-jsxwide"]},"children":[{"type":"text","value":"<EzPage>\n  <EzTable\n    title=\"All Orders\"\n    actions={<EzButton>View related orders</EzButton>}\n    columns={[\n      {heading: 'Order number', accessor: 'id'},\n      {heading: 'Event date', accessor: 'date'},\n      {heading: 'Total', accessor: 'total', numeric: true},\n    ]}\n    items={[\n      {id: '#004', date: '02/28/18', total: '$3267'},\n      {id: '#007', date: '02/28/18', total: '$3214'},\n    ]}\n  />\n</EzPage>\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"custom-cell-rendering"},"children":[{"type":"element","tagName":"a","properties":{"href":"#custom-cell-rendering","ariaHidden":true,"className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","height":16,"version":"1.1","viewBox":"0 0 16 16","width":16},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Custom cell rendering"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Use when more fine-grained control over the table content is desired (in favor of simple Textual/Numerical content). To provide custom content, the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"accessor"}]},{"type":"text","value":" property of each column can be provided any "},{"type":"element","tagName":"a","properties":{"href":"https://reactjs.org/docs/rendering-elements.html"},"children":[{"type":"text","value":"React element"}]},{"type":"text","value":" or custom React component. Custom components will be provided an "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"item"}]},{"type":"text","value":" prop with the record to be rendered."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-jsxwide"]},"children":[{"type":"text","value":"() => {\n  // declare any component to define your custom column template\n  const StoreName = ({item: {store, id}}) => (\n    <div>\n      <div>\n        <a href=\"javascript:void(0);\">{store}</a>\n      </div>\n      <div>\n        <EzTextStyle use=\"subdued\">{id}</EzTextStyle>\n      </div>\n    </div>\n  );\n\n  return (\n    <EzPage>\n      <EzTable\n        title=\"All Stores\"\n        subtitle=\"Compared to the same period last year\"\n        columns={[\n          {heading: 'Store name', accessor: StoreName},\n          {heading: 'Total sales', accessor: 'total', numeric: true},\n          {heading: 'Average order value', accessor: 'average', numeric: true}\n        ]}\n        items={[\n          {id: '#004', store: '123 Example Store', total: 23267, average: 327.79},\n          {id: '#007', store: '45 Meadowview Lane', total: 22788, average: 367.55},\n        ]} />\n    </EzPage>\n  );\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"bulk-row-selection"},"children":[{"type":"element","tagName":"a","properties":{"href":"#bulk-row-selection","ariaHidden":true,"className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","height":16,"version":"1.1","viewBox":"0 0 16 16","width":16},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Bulk row selection"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Use when multiple rows of a table can be selected together in order to perform an action in bulk."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Providing the bulk select event handler props ("},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onRowSelectClick"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onBulkSelectClick"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"isRowSelected"}]},{"type":"text","value":") will add a column to each table row containing a checkbox input, along with a corresponding column header containing a checkbox input."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The row-level checkbox input can be toggled to indicate that the current row should be included in a particular action. This functionality is handled by the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"isRowSelected"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onRowSelectClick"}]},{"type":"text","value":" props. "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"isRowSelected"}]},{"type":"text","value":" is a Function that is used to determine the row-level checkbox input state. It is called when rendering each row, and is passed the row's "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"item"}]},{"type":"text","value":" object as the single argument. "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onRowSelectClick"}]},{"type":"text","value":" is a Function that is bound to the row-level checkbox input change handler. It is called when the input state changes, and is passed the row's "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"item"}]},{"type":"text","value":" object as the single argument."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The column header checkbox input can be toggled to select or deselect all currently visible rows. This functionality is handled by the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onBulkSelectClick"}]},{"type":"text","value":" prop. This should be a Function that handles the behavior of selecting or deselecting all the visible table rows."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The column header checkbox input state and behavior is determined by evaluating the state of each visible table row. If all rows are selected, then the checkbox will appear selected, and deselecting the input should deselect all rows. If some or none of the rows are selected, the checkbox will appear deselected, and selecting the input should select all rows."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-jsxwide"]},"children":[{"type":"text","value":"() => {\n  const items = [\n    {store: '123 Example Store', total: 23267, average: 327.79},\n    {store: '45 Meadowview Lane', total: 22788, average: 367.55},\n  ];\n\n  const Table = () => {\n    const [selection, setSelection] = React.useState([]);\n\n    const selectRow = item => setSelection(selection.concat(item));\n    const deselectRow = item => setSelection(selection.filter(x => x !== item));\n    const isRowSelected = item => selection.includes(item);\n\n    const onBulkSelectClick = () => {\n      const newSelection = selection.length === items.length ? [] : items;\n      setSelection(newSelection);\n    };\n\n    const onRowSelectClick = (_event, {item}) => {\n      isRowSelected(item) ? deselectRow(item) : selectRow(item);\n    };\n\n    return (\n      <EzPage>\n        <EzTable\n          title=\"All Stores\"\n          subtitle=\"Compared to the same period last year\"\n          onRowSelectClick={onRowSelectClick}\n          onBulkSelectClick={onBulkSelectClick}\n          isRowSelected={isRowSelected}\n          columns={[\n            {heading: 'Store name', accessor: 'store'},\n            {heading: 'Total sales', accessor: 'total', numeric: true},\n            {heading: 'Average order value', accessor: 'average', numeric: true}\n          ]}\n          items={items} />\n      </EzPage>\n    );\n  }\n\n  return <Table />;\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"with-sortable-columns"},"children":[{"type":"element","tagName":"a","properties":{"href":"#with-sortable-columns","ariaHidden":true,"className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","height":16,"version":"1.1","viewBox":"0 0 16 16","width":16},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"With sortable columns"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Use column sorting to help users find items quicker in larger data sets. Column sorting is switched off for all columns by default. Table data can only be sorted by a single column at a time."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To turn on column sorting, set the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"sortable"}]},{"type":"text","value":" flag for each column where sorting is supported. Sorting columns with custom cell rendering is currently not supported."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The client code must also provide an "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onSortClick"}]},{"type":"text","value":" function as a prop to "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"EzTable"}]},{"type":"text","value":". When the column header for a sortable column is clicked, "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"EzTable"}]},{"type":"text","value":" will notify the client that sorting is requested by calling the provided "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onSortClick"}]},{"type":"text","value":" function. The function is called with the click event as the first argument, and an object with the properties "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"column"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"direction"}]},{"type":"text","value":" as the second argument. "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"column"}]},{"type":"text","value":" is the object representing the column being sorted and "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"direction"}]},{"type":"text","value":" is a string whose value represents the direction the sort should use, either "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"asc"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"desc"}]},{"type":"text","value":". When sorting an unsorted column, the initial sort direction is "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"asc"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When providing pre-sorted data to EzTable, the relevant column should have a "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"defaultSort"}]},{"type":"text","value":" value set to either "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"asc"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"desc"}]},{"type":"text","value":" to indicate the sort order applied to the data."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-jsxwide"]},"children":[{"type":"text","value":"() => {\n  const initialItems = [\n    {name: 'Joan Jett', storeCount: 12},\n    {name: 'David Bowie', storeCount: 6},\n    {name: 'Sheena Easton', storeCount: 6},\n    {name: 'Stevie Nicks', storeCount: 1},\n  ];\n\n  const Table = () => {\n    const [items, updateItems] = React.useState(initialItems);\n\n    const onSortClick = (_event, {column, direction}) => {\n      const newItems = [...initialItems].sort((a, b) => {\n        const val1 = a[column.accessor];\n        const val2 = b[column.accessor];\n\n        return (direction === 'asc' ? val1 > val2 : val1 < val2) ? 1 : -1;\n      });\n\n      updateItems(newItems);\n    };\n\n    return (\n      <EzPage>\n        <EzTable\n          title=\"Store Owners\"\n          onSortClick={onSortClick}\n          columns={[\n            {heading: 'Name', accessor: 'name', sortable: true},\n            {heading: 'Store Count', accessor: 'storeCount', sortable: true, defaultSort: 'desc'},\n          ]}\n          items={items}\n        />\n      </EzPage>\n    );\n  };\n\n  return <Table />;\n};\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"pagination"},"children":[{"type":"element","tagName":"a","properties":{"href":"#pagination","ariaHidden":true,"className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","height":16,"version":"1.1","viewBox":"0 0 16 16","width":16},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Pagination"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Pagination can be used to display a large data set, either local or remote, with a set number of rows per page."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Pagination is enabled by adding the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pagination"}]},{"type":"text","value":" attribute to "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"EzTable"}]},{"type":"text","value":" with the following properties:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"currentPage"}]},{"type":"text","value":" (required): an integer that represents the default starting page for the data set. This number is 1-indexed."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"totalRows"}]},{"type":"text","value":" (required): an integer that represents the total number of items in the data set."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"rowsPerPage"}]},{"type":"text","value":" (required): an integer used to determine how many items to show per page in the table."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"rowsPerPageOptions"}]},{"type":"text","value":" (required): an array of integers that is displayed at the bottom right of the table used to change "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"rowsPerPage"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onPrevPageClick"}]},{"type":"text","value":" (required): an event that is fired when the \"Previous Page\" link is clicked."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onNextPageClick"}]},{"type":"text","value":" (required): an event that is fired when the \"Next Page\" link is clicked."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onRowsPerPageChange"}]},{"type":"text","value":" (required): an event that is fired when the \"n rows per page\" select value is changed."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{"id":"local-data"},"children":[{"type":"element","tagName":"a","properties":{"href":"#local-data","ariaHidden":true,"className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","height":16,"version":"1.1","viewBox":"0 0 16 16","width":16},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Local Data"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This example uses a local data set. The reducer is used to change the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"currentPage"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"rowsPerPage"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-jsxwide"]},"children":[{"type":"text","value":"() => {\n  const allItems = [\n    {first: 'Tiffany', last: 'Morin'},\n    {first: 'Mitchell', last: 'Hoffman'},\n    {first: 'Léo', last: 'Gonzalez'},\n    {first: 'Alberto', last: 'Arias'},\n    {first: 'Olivier', last: 'Campos'},\n    {first: 'Ömür', last: 'Ekici'},\n    {first: 'Énio', last: 'Barros'},\n    {first: 'Ava', last: 'Ma'},\n    {first: 'Norberta', last: 'Novaes'},\n    {first: 'Deni', last: 'Lubbers'},\n  ];\n\n  function reducer(state, action) {\n    switch (action.type) {\n      case 'incrementCurrentPage':\n        return {\n          ...state,\n          currentPage: state.currentPage + 1,\n        };\n      case 'decrementCurrentPage':\n        return {...state, currentPage: state.currentPage - 1};\n      case 'updateRowsPerPage':\n        return {\n          ...state,\n          rowsPerPage: action.value,\n          currentPage: 1,\n        };\n      default:\n        throw new Error();\n    }\n  }\n\n  const Table = () => {\n    const [state, dispatch] = React.useReducer(reducer, {\n      currentPage: 1,\n      totalRows: 10,\n      rowsPerPage: 5,\n    });\n\n    const startIndex = (state.currentPage - 1) * state.rowsPerPage;\n\n    return (\n      <EzPage>\n        <EzTable\n          title=\"Store Owners\"\n          columns={[\n            {heading: 'First Name', accessor: 'first'},\n            {heading: 'Last Name', accessor: 'last'},\n          ]}\n          items={allItems.slice(startIndex, startIndex + state.rowsPerPage)}\n          pagination={{\n            currentPage: state.currentPage,\n            totalRows: state.totalRows,\n            rowsPerPage: state.rowsPerPage,\n            rowsPerPageOptions: [5, 10, 20, 30],\n            onPrevPageClick: e => {\n              e.preventDefault();\n              dispatch({type: 'decrementCurrentPage'});\n            },\n            onNextPageClick: e => {\n              e.preventDefault();\n              dispatch({type: 'incrementCurrentPage'});\n            },\n            onRowsPerPageChange: e => {\n              e.preventDefault();\n              dispatch({type: 'updateRowsPerPage', value: e.target.value});\n            },\n          }}\n        />\n      </EzPage>\n    );\n  };\n\n  return <Table />;\n};\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{"id":"local-data-with-sorting"},"children":[{"type":"element","tagName":"a","properties":{"href":"#local-data-with-sorting","ariaHidden":true,"className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","height":16,"version":"1.1","viewBox":"0 0 16 16","width":16},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Local Data with Sorting"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This example uses a local data set and enables sorting on that data set. The reducer is used to change the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"currentPage"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"rowsPerPage"}]},{"type":"text","value":", and sorts the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"items"}]},{"type":"text","value":" based on the column and sort direction supplied by the column headers."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-jsxwide"]},"children":[{"type":"text","value":"() => {\n  const initialItems = [\n    {first: 'Tiffany', last: 'Morin'},\n    {first: 'Mitchell', last: 'Hoffman'},\n    {first: 'Léo', last: 'Gonzalez'},\n    {first: 'Alberto', last: 'Arias'},\n    {first: 'Olivier', last: 'Campos'},\n    {first: 'Ömür', last: 'Ekici'},\n    {first: 'Énio', last: 'Barros'},\n    {first: 'Ava', last: 'Ma'},\n    {first: 'Norberta', last: 'Novaes'},\n    {first: 'Deni', last: 'Lubbers'},\n  ];\n\n  function reducer(state, action) {\n    switch (action.type) {\n      case 'incrementCurrentPage':\n        return {\n          ...state,\n          currentPage: state.currentPage + 1,\n        };\n      case 'decrementCurrentPage':\n        return {...state, currentPage: state.currentPage - 1};\n      case 'updateRowsPerPage':\n        return {\n          ...state,\n          rowsPerPage: action.value,\n          currentPage: 1,\n        };\n      case 'updateSort':\n        return {\n          ...state,\n          currentPage: 1,\n          items: [...initialItems].sort((a, b) => {\n            const val1 = a[action.value.column.accessor];\n            const val2 = b[action.value.column.accessor];\n\n            return (action.value.direction === 'asc' ? val1 > val2 : val1 < val2) ? 1 : -1;\n          }),\n        };\n      default:\n        throw new Error();\n    }\n  }\n\n  const Table = () => {\n    const [state, dispatch] = React.useReducer(reducer, {\n      currentPage: 1,\n      totalRows: 10,\n      rowsPerPage: 5,\n      items: initialItems,\n    });\n\n    const startIndex = (state.currentPage - 1) * state.rowsPerPage;\n\n    return (\n      <EzPage>\n        <EzTable\n          title=\"Store Owners\"\n          onSortClick={(_event, value) => {\n            dispatch({type: 'updateSort', value});\n          }}\n          columns={[\n            {heading: 'First Name', accessor: 'first', sortable: true},\n            {heading: 'Last Name', accessor: 'last', sortable: true},\n          ]}\n          items={state.items.slice(startIndex, startIndex + state.rowsPerPage)}\n          pagination={{\n            currentPage: state.currentPage,\n            totalRows: state.totalRows,\n            rowsPerPage: state.rowsPerPage,\n            rowsPerPageOptions: [5, 10, 20, 30],\n            onPrevPageClick: e => {\n              e.preventDefault();\n              dispatch({type: 'decrementCurrentPage'});\n            },\n            onNextPageClick: e => {\n              e.preventDefault();\n              dispatch({type: 'incrementCurrentPage'});\n            },\n            onRowsPerPageChange: e => {\n              e.preventDefault();\n              dispatch({type: 'updateRowsPerPage', value: e.target.value});\n            },\n          }}\n        />\n      </EzPage>\n    );\n  };\n\n  return <Table />;\n};\n"}]}]}],"data":{"quirksMode":false}},"frontmatter":{"path":"/components/ez-table","title":"Table"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}