{"componentChunkName":"component---src-components-markdown-js","path":"/components/ez-progress-tracker","result":{"data":{"markdownRemark":{"html":"<p>A progress tracker conveys progress through linear steps or actions across multiple screens, in order to complete a task. The tracker shows users where they are in the process, and can be used to navigate through the process by selecting steps.</p>\n<hr>\n<h2 id=\"best-practices\" style=\"position:relative;\"><a href=\"#best-practices\" aria-label=\"best practices permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Best Practices</h2>\n<p>Progress trackers should:</p>\n<ul>\n<li>Use labels that clearly indicate the purpose of the step. When writing, keep options to a single line of text, be short and concise, ideally 1-2 words.</li>\n<li>If a task needs more than six steps, consider simplifying the process or breaking it up into multiple tasks</li>\n<li>If there are less than three steps, consider showing the steps on a single screen</li>\n</ul>\n<hr>\n<h2 id=\"examples\" style=\"position:relative;\"><a href=\"#examples\" aria-label=\"examples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h2>\n<h3 id=\"horizontal-progress-tracker\" style=\"position:relative;\"><a href=\"#horizontal-progress-tracker\" aria-label=\"horizontal progress tracker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Horizontal progress tracker</h3>\n<pre><code class=\"language-jsx\">() => {\n  const [activeStep, setActiveStep] = React.useState(0);\n\n  const steps = [\n    {label: 'Check in at restaurant'},\n    {label: 'Leave for destination'},\n    {label: 'Arrive at drop-off'},\n    {label: 'Delivery Complete'},\n  ].map((step, i) => ({...step, complete: i &#x3C; activeStep}));\n\n  return (\n    &#x3C;EzLayout layout=\"stack\">\n      &#x3C;EzProgressTracker steps={steps} selected={steps[activeStep] || steps[steps.length - 1]} />\n\n      {/* Buttons to navigatie between steps */}\n      &#x3C;EzLayout layout=\"split\">\n        {activeStep === steps.length ? (\n          &#x3C;EzButton use=\"primary\" onClick={() => setActiveStep(0)}>\n            Reset\n          &#x3C;/EzButton>\n        ) : (\n          &#x3C;>\n            &#x3C;EzButton\n              use=\"tertiary\"\n              disabled={activeStep === 0}\n              onClick={() => setActiveStep(activeStep - 1)}\n            >\n              Prev\n            &#x3C;/EzButton>\n            {steps[activeStep].label}\n            &#x3C;EzButton use=\"primary\" onClick={() => setActiveStep(activeStep + 1)}>\n              {activeStep &#x3C; steps.length - 1 ? 'Next' : 'Finish'}\n            &#x3C;/EzButton>\n          &#x3C;/>\n        )}\n      &#x3C;/EzLayout>\n    &#x3C;/EzLayout>\n  );\n};\n</code></pre>\n<h3 id=\"vertical-progress-tracker\" style=\"position:relative;\"><a href=\"#vertical-progress-tracker\" aria-label=\"vertical progress tracker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vertical progress tracker</h3>\n<pre><code class=\"language-jsx\">() => {\n  const [activeStep, setActiveStep] = React.useState(0);\n\n  const steps = [\n    {label: 'Catering Menu'},\n    {label: 'Delivery Capcity &#x26; Hours'},\n    {label: 'Delivery Range &#x26; Fees'},\n    {label: 'Order Lead Time'},\n    {label: 'Payment Information'},\n  ].map((step, i) => ({...step, complete: i &#x3C; activeStep}));\n\n  return (\n    &#x3C;EzLayout layout=\"stack\">\n      &#x3C;EzProgressTracker\n        steps={steps}\n        selected={steps[activeStep] || steps[steps.length - 1]}\n        orientation=\"vertical\"\n      />\n\n      {/* Buttons to navigatie between steps */}\n      &#x3C;EzLayout layout=\"split\">\n        {activeStep === steps.length ? (\n          &#x3C;EzButton use=\"primary\" onClick={() => setActiveStep(0)}>\n            Reset\n          &#x3C;/EzButton>\n        ) : (\n          &#x3C;>\n            &#x3C;EzButton\n              use=\"tertiary\"\n              disabled={activeStep === 0}\n              onClick={() => setActiveStep(activeStep - 1)}\n            >\n              Prev\n            &#x3C;/EzButton>\n            {steps[activeStep].label}\n            &#x3C;EzButton use=\"primary\" onClick={() => setActiveStep(activeStep + 1)}>\n              {activeStep &#x3C; steps.length - 1 ? 'Next' : 'Finish'}\n            &#x3C;/EzButton>\n          &#x3C;/>\n        )}\n      &#x3C;/EzLayout>\n    &#x3C;/EzLayout>\n  );\n};\n</code></pre>\n<h3 id=\"navigating-through-steps\" style=\"position:relative;\"><a href=\"#navigating-through-steps\" aria-label=\"navigating through steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Navigating through steps</h3>\n<p>Non-linear steps, or complex multi-step flows can be supported, allowing the user to enter or revist any prior step in the flow.</p>\n<p>Each step passed to the <code>steps</code> prop allows an optional <code>href</code>, or <code>onClick</code> handler to be provided, making each step label a clickable link to navigate through multi-step flows.</p>\n<p>In order to support client-side routing implementations, each step also supports an optional <code>as</code> property, accepting a Link component such as <a href=\"https://reacttraining.com/react-router/web/api/Link\">react-router's Link</a>. The any additional props on each step will also be forwarded to the link component.</p>\n<pre><code class=\"language-jsx\">() => {\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [completed, setCompleted] = React.useState(new Set());\n\n  const steps = [\n    {label: 'Catering Menu'},\n    {label: 'Delivery Capcity &#x26; Hours'},\n    {label: 'Delivery Range &#x26; Fees'},\n    {label: 'Order Lead Time'},\n    {label: 'Payment Information'},\n  ].map((step, i) => ({\n    ...step,\n    complete: completed.has(i),\n    onClick: () => setActiveStep(i),\n  }));\n\n  return (\n    &#x3C;EzLayout layout=\"stack\">\n      &#x3C;EzProgressTracker\n        steps={steps}\n        selected={steps[activeStep] || steps[steps.length - 1]}\n        orientation=\"vertical\"\n      />\n\n      {/* Buttons to navigatie between steps */}\n      &#x3C;EzLayout layout=\"split\">\n        {activeStep === steps.length ? (\n          &#x3C;EzButton\n            use=\"primary\"\n            onClick={() => {\n              setActiveStep(0);\n              setCompleted(new Set());\n            }}\n          >\n            Reset\n          &#x3C;/EzButton>\n        ) : (\n          &#x3C;>\n            &#x3C;EzLayout>\n              &#x3C;EzButton\n                use=\"tertiary\"\n                disabled={activeStep === 0}\n                onClick={() => setActiveStep(activeStep - 1)}\n              >\n                Prev\n              &#x3C;/EzButton>\n              &#x3C;EzButton\n                use=\"primary\"\n                onClick={() => {\n                  if (completed.has(activeStep)) completed.delete(activeStep);\n                  else completed.add(activeStep);\n                  setCompleted(new Set(completed));\n                }}\n              >\n                {completed.has(activeStep) ? 'Mark as Incomplete' : 'Mark as Complete'}\n              &#x3C;/EzButton>\n            &#x3C;/EzLayout>\n            {steps[activeStep].label}\n            &#x3C;EzButton use=\"primary\" onClick={() => setActiveStep(activeStep + 1)}>\n              {activeStep &#x3C; steps.length - 1 ? 'Next' : 'Finish'}\n            &#x3C;/EzButton>\n          &#x3C;/>\n        )}\n      &#x3C;/EzLayout>\n    &#x3C;/EzLayout>\n  );\n};\n</code></pre>\n<hr>\n<h2 id=\"browser-support\" style=\"position:relative;\"><a href=\"#browser-support\" aria-label=\"browser support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Browser support</h2>\n<p>The Progress Tracker component internally uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>Array.prototype.findIndex()</code></a> and may require a polyfill to provide <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex#browser_compatibility\">browser support</a> depending on the specific requirements for your application. We recommend using <a href=\"https://polyfill.io/v3/\">Polyfill.io</a> in your application to apply necessary polyfills only when they are needed for the requesting browser.</p>\n<hr>\n<h2 id=\"related-components\" style=\"position:relative;\"><a href=\"#related-components\" aria-label=\"related components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related components</h2>\n<ul>\n<li><a href=\"/recipe/components/ez-related\">Related</a></li>\n</ul>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A progress tracker conveys progress through linear steps or actions across multiple screens, in order to complete a task. The tracker shows users where they are in the process, and can be used to navigate through the process by selecting steps."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"best-practices","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#best-practices","ariaLabel":"best practices permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Best Practices"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Progress trackers should:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Use labels that clearly indicate the purpose of the step. When writing, keep options to a single line of text, be short and concise, ideally 1-2 words."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If a task needs more than six steps, consider simplifying the process or breaking it up into multiple tasks"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If there are less than three steps, consider showing the steps on a single screen"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"examples","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#examples","ariaLabel":"examples permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Examples"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"horizontal-progress-tracker","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#horizontal-progress-tracker","ariaLabel":"horizontal progress tracker permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Horizontal progress tracker"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"() => {\n  const [activeStep, setActiveStep] = React.useState(0);\n\n  const steps = [\n    {label: 'Check in at restaurant'},\n    {label: 'Leave for destination'},\n    {label: 'Arrive at drop-off'},\n    {label: 'Delivery Complete'},\n  ].map((step, i) => ({...step, complete: i < activeStep}));\n\n  return (\n    <EzLayout layout=\"stack\">\n      <EzProgressTracker steps={steps} selected={steps[activeStep] || steps[steps.length - 1]} />\n\n      {/* Buttons to navigatie between steps */}\n      <EzLayout layout=\"split\">\n        {activeStep === steps.length ? (\n          <EzButton use=\"primary\" onClick={() => setActiveStep(0)}>\n            Reset\n          </EzButton>\n        ) : (\n          <>\n            <EzButton\n              use=\"tertiary\"\n              disabled={activeStep === 0}\n              onClick={() => setActiveStep(activeStep - 1)}\n            >\n              Prev\n            </EzButton>\n            {steps[activeStep].label}\n            <EzButton use=\"primary\" onClick={() => setActiveStep(activeStep + 1)}>\n              {activeStep < steps.length - 1 ? 'Next' : 'Finish'}\n            </EzButton>\n          </>\n        )}\n      </EzLayout>\n    </EzLayout>\n  );\n};\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"vertical-progress-tracker","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#vertical-progress-tracker","ariaLabel":"vertical progress tracker permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Vertical progress tracker"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"() => {\n  const [activeStep, setActiveStep] = React.useState(0);\n\n  const steps = [\n    {label: 'Catering Menu'},\n    {label: 'Delivery Capcity & Hours'},\n    {label: 'Delivery Range & Fees'},\n    {label: 'Order Lead Time'},\n    {label: 'Payment Information'},\n  ].map((step, i) => ({...step, complete: i < activeStep}));\n\n  return (\n    <EzLayout layout=\"stack\">\n      <EzProgressTracker\n        steps={steps}\n        selected={steps[activeStep] || steps[steps.length - 1]}\n        orientation=\"vertical\"\n      />\n\n      {/* Buttons to navigatie between steps */}\n      <EzLayout layout=\"split\">\n        {activeStep === steps.length ? (\n          <EzButton use=\"primary\" onClick={() => setActiveStep(0)}>\n            Reset\n          </EzButton>\n        ) : (\n          <>\n            <EzButton\n              use=\"tertiary\"\n              disabled={activeStep === 0}\n              onClick={() => setActiveStep(activeStep - 1)}\n            >\n              Prev\n            </EzButton>\n            {steps[activeStep].label}\n            <EzButton use=\"primary\" onClick={() => setActiveStep(activeStep + 1)}>\n              {activeStep < steps.length - 1 ? 'Next' : 'Finish'}\n            </EzButton>\n          </>\n        )}\n      </EzLayout>\n    </EzLayout>\n  );\n};\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"navigating-through-steps","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#navigating-through-steps","ariaLabel":"navigating through steps permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Navigating through steps"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Non-linear steps, or complex multi-step flows can be supported, allowing the user to enter or revist any prior step in the flow."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Each step passed to the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"steps"}]},{"type":"text","value":" prop allows an optional "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"href"}]},{"type":"text","value":", or "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onClick"}]},{"type":"text","value":" handler to be provided, making each step label a clickable link to navigate through multi-step flows."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In order to support client-side routing implementations, each step also supports an optional "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"as"}]},{"type":"text","value":" property, accepting a Link component such as "},{"type":"element","tagName":"a","properties":{"href":"https://reacttraining.com/react-router/web/api/Link"},"children":[{"type":"text","value":"react-router's Link"}]},{"type":"text","value":". The any additional props on each step will also be forwarded to the link component."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"() => {\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [completed, setCompleted] = React.useState(new Set());\n\n  const steps = [\n    {label: 'Catering Menu'},\n    {label: 'Delivery Capcity & Hours'},\n    {label: 'Delivery Range & Fees'},\n    {label: 'Order Lead Time'},\n    {label: 'Payment Information'},\n  ].map((step, i) => ({\n    ...step,\n    complete: completed.has(i),\n    onClick: () => setActiveStep(i),\n  }));\n\n  return (\n    <EzLayout layout=\"stack\">\n      <EzProgressTracker\n        steps={steps}\n        selected={steps[activeStep] || steps[steps.length - 1]}\n        orientation=\"vertical\"\n      />\n\n      {/* Buttons to navigatie between steps */}\n      <EzLayout layout=\"split\">\n        {activeStep === steps.length ? (\n          <EzButton\n            use=\"primary\"\n            onClick={() => {\n              setActiveStep(0);\n              setCompleted(new Set());\n            }}\n          >\n            Reset\n          </EzButton>\n        ) : (\n          <>\n            <EzLayout>\n              <EzButton\n                use=\"tertiary\"\n                disabled={activeStep === 0}\n                onClick={() => setActiveStep(activeStep - 1)}\n              >\n                Prev\n              </EzButton>\n              <EzButton\n                use=\"primary\"\n                onClick={() => {\n                  if (completed.has(activeStep)) completed.delete(activeStep);\n                  else completed.add(activeStep);\n                  setCompleted(new Set(completed));\n                }}\n              >\n                {completed.has(activeStep) ? 'Mark as Incomplete' : 'Mark as Complete'}\n              </EzButton>\n            </EzLayout>\n            {steps[activeStep].label}\n            <EzButton use=\"primary\" onClick={() => setActiveStep(activeStep + 1)}>\n              {activeStep < steps.length - 1 ? 'Next' : 'Finish'}\n            </EzButton>\n          </>\n        )}\n      </EzLayout>\n    </EzLayout>\n  );\n};\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"browser-support","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#browser-support","ariaLabel":"browser support permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Browser support"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The Progress Tracker component internally uses "},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array.prototype.findIndex()"}]}]},{"type":"text","value":" and may require a polyfill to provide "},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex#browser_compatibility"},"children":[{"type":"text","value":"browser support"}]},{"type":"text","value":" depending on the specific requirements for your application. We recommend using "},{"type":"element","tagName":"a","properties":{"href":"https://polyfill.io/v3/"},"children":[{"type":"text","value":"Polyfill.io"}]},{"type":"text","value":" in your application to apply necessary polyfills only when they are needed for the requesting browser."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"related-components","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#related-components","ariaLabel":"related components permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Related components"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"/recipe/components/ez-related"},"children":[{"type":"text","value":"Related"}]}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"frontmatter":{"path":"/components/ez-progress-tracker","title":"Progress tracker","name":"EzProgressTracker","tags":["tracker","steps"]}}},"pageContext":{}},"staticQueryHashes":["3052156184","771875118","771875118"]}