{"pageProps":{"frontmatter":{"path":"/support/migrating-to-recipe-8","title":"Migrating to Recipe 8"},"code":"var Component=(()=>{var c=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var r=t=>o(t,\"__esModule\",{value:!0});var u=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{r(t);for(var i in e)o(t,i,{get:e[i],enumerable:!0})},g=(t,e,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of d(e))!m.call(t,s)&&s!==\"default\"&&o(t,s,{get:()=>e[s],enumerable:!(i=p(e,s))||i.enumerable});return t},y=t=>g(r(o(t!=null?c(h(t)):{},\"default\",t&&t.__esModule&&\"default\"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var l=u((x,a)=>{a.exports=_jsx_runtime});var v={};f(v,{default:()=>j,frontmatter:()=>b});var n=y(l()),b={path:\"/support/migrating-to-recipe-8\",title:\"Migrating to Recipe 8\"};function w(t){let e=Object.assign({p:\"p\",strong:\"strong\",h2:\"h2\",a:\"a\",ol:\"ol\",li:\"li\",h3:\"h3\",pre:\"pre\",code:\"code\"},t.components),{wrapper:i}=e,s=(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"To facilitate the usage of Recipe across a broader set of projects including ezCater's marketplace, a new release of Recipe was published. This release is a \",(0,n.jsx)(e.strong,{children:\"major version release\"}),\" and as such, \",(0,n.jsx)(e.strong,{children:\"will require migration steps\"}),\" for applications that currently use Recipe version 7.x or below.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"breaking-changes\",children:\"Breaking changes\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The breaking changes are detailed in the Recipe \",(0,n.jsx)(e.a,{href:\"/changelog/#800---2019-12-16\",children:\"release notes for version 8.0.0\"}),\", but can be summarized as follows:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Recipe's base font size has changed from 14px to 16px.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Applications that need to support IE11 will now require a polyfill for CSS custom properties.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"migration-steps\",children:\"Migration steps\"}),`\n`,(0,n.jsx)(e.h3,{id:\"base-font-size\",children:\"Base font size\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Applications using Recipe today that are not ready to migrate to a base font size of 16px can continue to use their current base font size by adding the new \",(0,n.jsx)(e.a,{href:\"/components/ez-base-font-size-compatibility\",children:\"EzBaseFontSizeCompatibility\"}),\" component to the top-level entry point(s) for their application.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"This component should be used as a sibling element to other content as shown below:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`<>\n  <EzBaseFontSizeCompatibility />\n  <EzPage>\n    <EzCard title=\"Card Heading\">\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus ultrices finibus purus, in\n        maximus diam molestie nec. Aenean maximus eget lacus sed lobortis.\n      </p>\n    </EzCard>\n  </EzPage>\n</>\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"ie-11-support\",children:\"IE 11 support\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Applications that need to support IE11 will now require a polyfill for CSS custom properties. It is important that this polyfill is applied \",(0,n.jsx)(e.strong,{children:\"before defining component styles with emotion\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"This typically means that the polyfill can be added at the top-level entry point(s) of your application.\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"with script include\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-html\",children:`<script>\n  if (!window.CSS || !CSS.supports('color', 'var(--a)')) {\n    var js = document.createElement('script');\n    js.src = 'https://cdn.jsdelivr.net/npm/css-vars-ponyfill@2';\n    js.onload = function() {\n      cssVars({watch: true});\n    };\n    document.head.appendChild(js);\n  }\n<\\/script>\n<script src=\"/my-application-bundle.js\"><\\/script>\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"OR\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"with module import\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// in file src/client.js\n// before all other imports\nimport './cssVars';\n\n// in file src/cssVars.js\nimport cssVars from 'css-vars-ponyfill';\n\ncssVars({watch: true});\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Including the \",(0,n.jsx)(e.code,{children:\"css-vars-ponyfill\"}),\" and initializing it in watch mode allows the polyfill to intercept dynamically inserted styles in order to re-write them with syntax supported by browsers that would otherwise not support custom properties.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In order for the \",(0,n.jsx)(e.code,{children:\"css-vars-ponyfill\"}),\" to work with emotion, you must also disable emotion's speedy mode (Emotion enables speedy by default in production builds):\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import {sheet} from 'emotion';\n\nsheet.speedy(false);\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Emotion's speedy mode uses \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model\",children:\"CSSOM APIs\"}),\" to insert dynamic style rules into the page. However, legacy browsers don't understand CSS custom properties and so when a rule is inserted that contains either a custom property declaration or \",(0,n.jsx)(e.code,{children:\"var()\"}),\" function, that declaration or function is dropped from the \",(0,n.jsx)(e.code,{children:\"CSSRule.cssText\"}),\" value. This behavior prevents any polyfill from rewriting those styles.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Disabling emotion's speedy mode allows emotion to insert styles as text content of a style node. This allows \",(0,n.jsx)(e.code,{children:\"css-vars-ponyfill\"}),\" to read the unvalidated text content directly, rather than the \",(0,n.jsx)(e.code,{children:\"CSSRule.cssText\"}),\".\"]})]});return i?(0,n.jsx)(i,Object.assign({},t,{children:s})):s}var j=w;return v;})();\n;return Component.default;"},"__N_SSG":true}